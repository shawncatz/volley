#!/usr/bin/env ruby

require 'rubygems'
require 'volley'
require 'clamp'

Volley::VolleyFile.init

module Volley
  class Command < Clamp::Command
    #self.default_subcommand = "list"
    option %w{-c --config}, "CONFIG", "configuration file", :default => "~/.Volleyfile"
    option %w{-p --primary}, "PRIMARY", "primary configuration file", :default => "Volleyfile"
    option %w{-d --debug}, :flag, "set debug flag"

    #option %w{-l --list}, :flag, "show projects and plans in local Volleyfile" do
    #  Volley::VolleyFile.load(config, :optional => true)
    #  Volley::VolleyFile.load(primary, :primary => true)
    #  Volley::Dsl::Project.projects.each do |p, project|
    #    Volley::Log.info "project: #{p}"
    #    project.plans.each do |pl, plan|
    #     Volley::Log.info ".. #{pl}"
    #    end
    #  end
    #  exit(1)
    #end
    option %w{-r --remote}, :flag, "show projects and branches in publisher data store" do
      Volley::VolleyFile.load(config, :optional => true)
      pub = Volley::Dsl.publisher
      raise "publisher must be specified (in file:#{config}) to use remote option" unless pub
      #branch  = args.delete(:branch)
      #version = args.delete(:version)
      ap pub.projects
      ap pub.branches
      ap pub.versions
      exit(1)
    end
    option %w{-g --get}, :flag, "get Volleyfile from publisher and load it"
    option %w{-f --fork}, :flag, "fork process into background"

    parameter "PROJECTPLAN", "project and plan to run, of the form project:plan"
    parameter "[ARG] ...", "additional arguments passed to plan of the form: key:value"

    #def load_volleyfiles
    #  Volley::VolleyFile.load(config, :optional => true)
    #end

    def execute
      #load_volleyfiles
      Volley::VolleyFile.load(config, :optional => true)
      Volley.config.debug = debug?
      primaryvf           = primary

      (project, plan) = projectplan.split(/:/)
      project = "volley" if project.nil? || project.blank?

      if debug?
        puts "project:   #{project.inspect}"
        puts "plan:      #{plan.inspect}"
        puts "args_list: #{arg_list.join(",")}"
      end

      args = arg_list.inject({ }) { |h, a| (k, v) = a.split(/:/); h[k.to_sym]= v; h }

      if remote?
        pub = Volley::Dsl.publisher
        raise "publisher must be specified (in file:#{config}) to use remote option" unless pub
        branch  = args.delete(:branch)
        version = args.delete(:version)
        desc    = { :project => project, :plan => plan }
        desc.merge!({ :branch => branch }) if branch
        desc.merge!({ :version => version }) if version
        dest      = pub.volleyfile(desc)
        primaryvf = dest
      end

      Volley::VolleyFile.load(primaryvf, :primary => true) if File.file?(primaryvf)
      raise "you must specify project (#{project}): [#{Volley::Dsl.projects.keys.join(',')}]" unless project && Volley::Dsl.project(project)
      raise "you must specify plan: #{project} [#{Volley::Dsl::Project.project(project).plans.keys.join(", ")}]" unless plan && Volley::Dsl::Project.project(project).plan(plan)

      Volley::Dsl::Project.project(project).plan(plan).call(:cliargs => arg_list)
    rescue Interrupt => e
      Volley::Log.warn "Cancelled..."
    rescue => e
      Volley::Log.error "error: #{e.message}"
      Volley::Log.error e if debug?
      Volley::Log.debug e
      raise Clamp::HelpWanted, self
    end

    #subcommand "list", "list projects and plans from local Volleyfile" do
    #  def execute
    #    load_volleyfiles
    #    Volley::Dsl::Project.projects.each do |p, project|
    #      Volley::Log.info "project: #{p}"
    #      project.plans.each do |pl, plan|
    #       Volley::Log.info ".. #{pl}"
    #      end
    #    end
    #  rescue Interrupt => e
    #    Volley::Log.warn "Cancelled..."
    #  rescue => e
    #    Volley::Log.error "error: #{e.message}"
    #    Volley::Log.error e if debug?
    #    raise Clamp::HelpWanted, self
    #  end
    #end
    #
    #subcommand "versions", "get version list of project or project:plan from remote data store" do
    #  #parameter "PROJECTPLAN", "project and plan to run, of the form project:plan"
    #  #option %w{-l --local}, :flag, "display information about projects and plans for Volleyfile"
    #
    #  def execute
    #    load_volleyfiles
    #    if remote?
    #      (project, branch) = remote.split(/:/)
    #      if project
    #        if branch
    #          # show project/branch versions
    #        else
    #          # show project names
    #        end
    #      else
    #        # show projects
    #      end
    #    else
    #    end
    #  rescue Interrupt => e
    #    Volley::Log.warn "Cancelled..."
    #  rescue => e
    #    Volley::Log.error "error: #{e.message}"
    #    Volley::Log.error e if debug?
    #    raise Clamp::HelpWanted, self
    #  end
    #end
    #subcommand "get", "get an artifact from the data store and run it" do
    #  option %w{-f --fork}, :flag, "fork process into background"
    #  parameter "GET", "<project>:<branch>[:<version>]:plan"
    #  parameter "[ARG] ...", "additional arguments passed to plan of the form: key:value"
    #  def execute
    #    load_volleyfiles
    #
    #    (project, branch, version, plan) = get.split(/[\/:\.\-]/)
    #    unless plan
    #      plan    = version
    #      version = "latest"
    #    end
    #    if debug?
    #      puts "project: #{project}"
    #      puts "branch:    #{branch}"
    #      puts "version: #{version}"
    #      puts "plan:    #{plan}"
    #    end
    #    pub = Volley::Dsl.publisher
    #    file = pub.pull(project, branch, version)
    #    dir = File.dirname(file)
    #    Volley::Log.info "changing directory: #{dir} (#{file})"
    #    cmd = "volley run #{project}:#{plan} branch:#{branch} #{arg_list.join(' ')}"
    #    Volley::Log.info "command: #{cmd}"
    #    FileUtils.mkdir_p("#{dir}/unpack")
    #    Dir.chdir("#{dir}/unpack")
    #    tgz = %x{tar xvfz #{file} 2>/dev/null}
    #    File.open("#{dir}/tgz.log", "w") {|f| f.write(tgz)}
    #    exec(cmd)
    #  rescue Interrupt => e
    #    Volley::Log.warn "Cancelled..."
    #  rescue => e
    #    Volley::Log.error "error: #{e.message}"
    #    Volley::Log.error e if debug?
    #    raise Clamp::HelpWanted, self
    #  end
    #end
    #subcommand "run", "run a project:plan from local Volleyfile" do
    #  option %w{-f --fork}, :flag, "fork process into background"
    #  parameter "PROJECTPLAN", "project and plan to run, of the form project:plan"
    #  parameter "[ARG] ...", "additional arguments passed to plan of the form: key:value"
    #
    #  def execute
    #    load_volleyfiles
    #
    #    (project, plan) = projectplan.split(/:/)
    #    project         = project.to_sym
    #    plan = plan.to_sym if plan
    #
    #    Volley.config.debug = debug?
    #
    #    if debug?
    #      puts "project:   #{project} #{Volley::Dsl.project(project)}"
    #      puts "plan:      #{plan}"
    #      puts "args_list: #{arg_list.join(",")}"
    #    end
    #
    #    raise "you must specify project: [#{Volley::Dsl.projects.keys.join(',')}]" unless project && Volley::Dsl.project(project)
    #    raise "you must specify plan: #{project} [#{Volley::Dsl::Project.project(project).plans.keys.join(", ")}]" unless plan && Volley::Dsl::Project.project(project).plan(plan)
    #
    #    Volley::Dsl::Project.project(project).plan(plan).call(:cliargs => arg_list)
    #  rescue Interrupt => e
    #    Volley::Log.warn "Cancelled..."
    #  rescue => e
    #    Volley::Log.error "error: #{e.message}"
    #    Volley::Log.error e if debug?
    #    raise Clamp::HelpWanted, self
    #  end
    #end
  end
end

Volley::Command.run