#!/usr/bin/env ruby

require 'rubygems'
require 'volley'
require 'clamp'

Volley::VolleyFile.init
STDOUT.sync = true

module Volley
  class Command < Clamp::Command
    option %w{-c --config}, "CONFIG", "configuration file", :default => "~/.Volleyfile"
    option %w{-p --primary}, "PRIMARY", "primary configuration file", :default => "Volleyfile"
    option %w{-d --debug}, :flag, "set debug flag"

    option %w{-r --remote}, :flag, "get Volleyfile from publisher and load it"
    option %w{-f --fork}, :flag, "fork process into background"

    parameter "PROJECTPLAN", "project and plan to run, of the form project:plan"
    parameter "[ARG] ...", "additional arguments passed to plan of the form: key:value"

    def execute
      Volley::VolleyFile.load(config, :optional => true)
      Volley.config.debug = debug?
      primaryvf           = primary

      (project, plan) = projectplan.split(/:/)
      project = "volley" if project.nil? || project.blank?

      if debug?
        puts "project:   #{project.inspect}"
        puts "plan:      #{plan.inspect}"
        puts "args_list: #{arg_list.join(",")}"
      end

      args = arg_list.inject({ }) { |h, a| (k, v) = a.split(/:/); h[k.to_sym]= v; h }

      if remote?
        pub = Volley::Dsl.publisher
        raise "publisher must be specified (in file:#{config}) to use remote option" unless pub
        branch  = args.delete(:branch)
        version = args.delete(:version)
        desc    = { :project => project, :plan => plan }
        desc.merge!({ :branch => branch }) if branch
        desc.merge!({ :version => version }) if version
        dest      = pub.volleyfile(desc)
        primaryvf = dest
      end

      Volley::VolleyFile.load(primaryvf, :primary => true) if File.file?(primaryvf)
      raise "you must specify project (#{project}): [#{Volley::Dsl.projects.keys.join(',')}]" unless project && Volley::Dsl.project(project)
      raise "you must specify plan: #{project} [#{Volley::Dsl::Project.project(project).plans.keys.join(", ")}]" unless plan && Volley::Dsl::Project.project(project).plan(plan)

      Volley::Dsl::Project.project(project).plan(plan).call(:cliargs => arg_list)
    rescue Interrupt => e
      Volley::Log.warn "Cancelled..."
    rescue => e
      Volley::Log.error "error: #{e.message}"
      Volley::Log.error e if debug?
      Volley::Log.debug e
      raise Clamp::HelpWanted, self
    end
  end
end

Volley::Command.run