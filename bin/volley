#!/usr/bin/env ruby

require 'rubygems'
require 'docopt'
require 'volley'
require 'awesome_print'

DOC = <<-DOC
Usage: volley [options] <plan> <descriptor> <argument>...

<plan>
  The plan to run.
  reserved plan names: [versions, latest, list]

<descriptor>
  A descriptor should conform to the following format:
    <project>[@<branch>[:<version>]]

  project:  the project name.
  branch:   the branch name.
            Defaults to the branch currently in use,
            must be specified for remote mode.
  version:  the version (revision)
            Defaults to the current revision
            In remote mode, defaults to "latest"

<argument>
  A list of key=value pairs

Options:
  -h --help           show this help message and exit
     --version        show version and exit
  -d --debug          show debug output, change log level to debug
  -c --config FILE    load additional Volleyfile [default: ~/.Volleyfile]
  -p --primary FILE   load primary Volleyfile [default: ./Volleyfile]

  -f --fork           fork process into background and exit
  -l --log LOG        log file [default: /opt/volley/volley.log]
  -L --level LEVEL    log level [default: debug]
DOC

module Volley
  class Command
    def initialize
    end

    def run(argv)
      STDOUT.sync = true
      options     = Docopt(DOC, Volley::Version::STRING)
      debug       = options[:debug]
      config      = options[:config]
      primary     = options[:primary]
      fork        = options[:fork]
      log         = options[:log]
      level       = options[:level]

      Volley::Dsl::VolleyFile.init
      Volley::Dsl::VolleyFile.load(config, :optional => true)
      Volley::Dsl::VolleyFile.load(primary, :primary => true) if File.file?(primary)
      Volley::Log.add(level.to_sym, log)
      Volley::Log.console_debug if debug
      Volley.config.debug = debug

      kvs = argv.select { |e| e.match(/(\w+)\=(\w+)/) }
      pos = argv.reject { |e| e.match(/(\w+)\=(\w+)/) }

      plan = pos.shift
      raise "error: must specify plan" unless plan

      if Volley::Dsl.project(:volley).plan?(plan)
        # the plan is reserved
        desc = "volley"
        kvs << "descriptor=volley"
      else
        # the plan isn't reserved
        desc = pos.shift
        raise "error: must specify descriptor" unless desc
        kvs << "descriptor=#{desc}"
      end

      if debug
        Volley::Log.debug "## OPTIONS ##"
        Volley::Log.debug "plan:       #{plan}"
        Volley::Log.debug "descriptor: #{desc}"
        Volley::Log.debug "positional: #{pos.join(",")}"
        Volley::Log.debug "key:value:  #{kvs.join(",")}"
      end

      Volley::Log.info "processing '#{plan}' plan for '#{desc}'"
      Volley.process(:plan => plan, :descriptor => desc, :args => kvs)
    rescue => e
      Volley::Log.error "exception: #{e.message} at #{e.backtrace.first}"
      if debug
        Volley::Log.error e
      else
        Volley::Log.debug e
      end
    end
  end
end

Volley::Command.new.run(ARGV)