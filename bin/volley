#!/usr/bin/env ruby

require 'rubygems'
require 'volley'
require 'clamp'

Volley::VolleyFile.init
STDOUT.sync = true

module Volley
  class Command < Clamp::Command
    option %w{-c --config}, "CONFIG", "configuration file", :default => "~/.Volleyfile"
    option %w{-p --primary}, "PRIMARY", "primary configuration file", :default => "./Volleyfile"
    option %w{-d --debug}, :flag, "set debug flag"
    option %w{-f --fork}, :flag, "fork process into background"

    parameter "DESCRIPTOR", "volley descriptor, follows the format: project:plan[@branch[:version]]"
    parameter "[ARG] ...", "additional arguments passed to plan of the form: key:value"

    def execute
      Volley::VolleyFile.load(config, :optional => true)
      Volley::VolleyFile.load(primary, :primary => true) if File.file?(primary)
      Volley.config.debug = debug?

      (project, plan, branch, version) = descriptor.split(/[:\@]/)
      project = "volley" if project.nil? || project.blank?

      args = arg_list
      args << "branch:#{branch}" if branch
      args << "version:#{version}" if version

      if debug?
        puts "project:   #{project}"
        puts "plan:      #{plan}"
        puts "branch:    #{branch}"
        puts "version:   #{version}"
        puts "args_list: #{args.join(",")}"
      end

      #raise "you must specify project (#{project}): [#{Volley::Dsl.projects.keys.join(',')}]" unless project && Volley::Dsl.project(project)
      #raise "you must specify plan: #{project} [#{Volley::Dsl::Project.project(project).plans.keys.join(", ")}]" unless plan && Volley::Dsl::Project.project(project).plan(plan)

      Volley.process(:project => project, :plan => plan, :branch => branch, :version => version, :args => args)
    rescue Interrupt => e
      Volley::Log.warn "Cancelled..."
    rescue => e
      Volley::Log.error "error: #{e.message}"
      Volley::Log.error e if debug?
      Volley::Log.debug e
      raise Clamp::HelpWanted, self
    end
  end
end

Volley::Command.run