project :volley do
  scm :base
  plan :init, :remote => false do
    default do
      file = File.expand_path("../../init/Volleyfile", __FILE__)
      dest = "#{Dir.pwd}/Volleyfile"
      FileUtils.copy(file, dest)
      puts "created: #{dest}"
    end
  end

  plan :list, :remote => false do
    default do
      Volley::Dsl::Project.projects.each do |p, project|
        Volley::Log.info "project: #{p}"
        project.plans.each do |pl, plan|
          Volley::Log.info ".. #{pl} #{plan.usage}"
        end
      end
    end
  end

  plan :latest do
    default do
      (project,branch,_) = args.descriptor.get
      raise "project and branch must be specified" unless project && branch

      pub = Volley::Dsl.publisher
      puts pub.latest(project, branch)
    end
  end

  plan :versions, :remote => false do
    argument :all, :convert => :boolean, :default => false
    argument :output, :default => "list", :convert => :to_sym, :choices => ["json", "xml", "list"]

    default do
      (project, branch, version) = args.descriptor.get

      pub  = Volley::Dsl.publisher
      data = []
      if args.all
        data = pub.all.keys.reject {|e| e =~ /latest$/}
        data.each { |k, v| puts "%2s %s" % [v, k] }
      else
        if project
          if branch
            if version != "latest"
              data = pub.contents(project, branch, version)
            else
              data = pub.versions(project, branch)
            end
          else
            data = pub.branches(project)
          end
        else
          data = pub.projects
        end

        case args.output
          when :json
            puts data.to_json
          when :xml
            puts data.to_xml
          else
            data.each { |e| puts e }
        end
      end
    end
  end

  plan :meta, :remote => false do
    default do
      list = Volley.meta.projects

      unless list && list.count > 0
        Volley::Log.info "no projects found"
        stop
      end

      project = args.descriptor.get.first
      if project
        project = args.descriptor.get.first
        Volley::Log.warn "#{list[project.to_sym]}"
      else
        list.each do |k, v|
          Volley::Log.warn "#{k} => #{v}"
        end
      end
    end
  end

  plan :published, :remote => false do
    default do
      pub = Volley::Dsl.publisher
      unless pub
        Volley::Log.error "publisher must be configured"
        stop
      end

      pub.list do |p, b, v, data|
        Volley::Log.warn "#{p}@#{b}:#{v}"
      end
    end
  end
end