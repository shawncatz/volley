project :volley do
  scm :auto, :required => false

  plan :init, :remote => false do
    default do
      file = File.expand_path("../../init/Volleyfile", __FILE__)
      dest = "#{Dir.pwd}/Volleyfile"
      FileUtils.copy(file, dest)
      puts "created: #{dest}"
    end
  end

  plan :info, :remote => false do
    default do
      Volley::Log.info "SCM:"
      Volley::Log.info ".. branch: #{source.branch} revision: #{source.revision}" if source
      Volley::Log.info "Projects/Plans:"
      Volley::Dsl::Project.projects.reject { |k, _| [:volley, :release, :project, :branch, :version].include?(k) }.each do |p, project|
        h = project.plans
        next unless h.count > 0
        h.keys.each do |pl|
          Volley::Log.info ".. #{p}:#{pl}"
        end
      end
    end
  end

  plan :list, :remote => false do
    default do
      Volley::Dsl::Project.projects.each do |p, project|
        project.plans.each do |pl, plan|
          Volley::Log.info "#{p}:#{pl} #{plan.usage}"
        end
        Volley::Log.info ""
      end
    end
  end

  plan :latest do
    default do
      (project, branch, _) = args.descriptor.get
      raise "project and branch must be specified" unless project && branch

      pub = Volley::Dsl.publisher
      puts pub.latest(project, branch)
    end
  end

  plan :released, remote: false do
    argument :project, required: true
    default do
      p = args.project
      pub = Volley::Dsl.publisher
      r = pub.latest_release(p)
      list = pub.versions(p, "release")
      list.each do |v|
        f = pub.released_from(p, v) || "unknown" rescue "unknown"
        puts "  #{v} <= #{f}"
      end

      puts "latest '#{p}' release: #{r}"
    end
  end

  plan :versions, :remote => false do
    argument :all, :convert => :boolean, :default => false
    argument :output, :default => "list", :convert => :to_sym, :choices => ["json", "xml", "list"]

    default do
      (project, branch, version) = args.descriptor.get

      pub = Volley::Dsl.publisher
      data = []
      if args.all
        data = pub.all.keys.reject { |e| e =~ /latest$/ }
        data.each { |k, v| puts "%2s %s" % [v, k] }
      else
        if project
          if branch
            if version != "latest"
              data = pub.contents(project, branch, version)
            else
              data = pub.versions(project, branch)
            end
          else
            data = pub.branches(project)
          end
        else
          data = pub.projects
        end

        case args.output
          when :json
            puts data.to_json
          when :xml
            puts data.to_xml
          else
            data.each { |e| puts e }
        end
      end
    end
  end

  plan :meta, :remote => false do
    default do
      list = Volley.meta.projects
      unless list && list.count > 0
        Volley::Log.info "no projects found"
        stop
      end

      project = args.descriptor.get.first
      if project
        project = args.descriptor.get.first
        Volley::Log.warn "#{list[project.to_sym]}"
      else
        list.each do |k, v|
          Volley::Log.warn "#{k} => #{v}"
        end
      end
    end
  end

  plan :published, :remote => false do
    default do
      pub = Volley::Dsl.publisher

      unless pub
        Volley::Log.error "publisher must be configured"
        stop
      end

      pub.list do |p, b, v, data|
        Volley::Log.warn "#{p}@#{b}:#{v}"
      end
    end
  end

  plan :release do
    argument :version, required: true
    pub = Volley::Dsl.publisher

    default do
      desc = args.descriptor
      to = args.version
      old = desc.to_s
      new = "#{desc.project}@release:#{to}"
      pub.release(old, new)
    end
  end

  plan :download do
    default do
      desc = args.descriptor
      pub = Volley::Dsl.publisher
      (p, b, v) = desc.get
      f = pub.pull(p, b, v)
      log "downloaded: #{f}"
    end
  end

  plan :exists, :remote => false do
    default do
      (project, branch, version) = args.descriptor.get
      pub = Volley::Dsl.publisher
      if project && branch && version != "latest"
        if pub.exists?(project, branch, version)
          Volley::Log.warn "#{args.descriptor} exists"
        else
          Volley::Log.warn "#{args.descriptor} does not exist"
          raise "#{args.descriptor} does not exist"
        end
      else
        Volley::Log.error "must specify full descriptor"
        stop
      end
    end
  end
end

project :release do
  plan :create do
    argument :version, required: true

    default do
      pub = Volley::Dsl.publisher
      desc = args.descriptor
      to = args.version
      old = desc.to_s
      new = "#{desc.project}@release:#{to}"
      pub.release(old, new)
    end
  end

  plan :list, remote: false do
    argument :project, required: true
    default do
      p = args.project
      pub = Volley::Dsl.publisher
      r = pub.latest_release(p)
      list = pub.versions(p, "release")
      list.each do |v|
        f = pub.released_from(p, v) || "unknown" rescue "unknown"
        puts "  #{v} <= #{f}"
      end

      puts "latest '#{p}' release: #{r}"
    end
  end
end

project :project do
  plan :list, remote: false do
    default do
      pub = Volley::Dsl.publisher
      pub.projects.each do |p|
        Volley::Log.warn p
      end
    end
  end
  plan :remove, remote: false do
    argument :name, required: true
    #argument :force, default: false, convert: :boolean
    default do
      pub = Volley::Dsl.publisher
      if args.force
        Volley::Log.debug "removing project: #{args.name}"
        pub.delete_project(args.name)
      else
        Volley::Log.warn "this process cannot be undone, if you are sure, run the same command with -F"
      end
    end
  end
end

project :branch do
  plan :list, remote: false do
    argument :project, required: true
    default do
      Volley::Dsl.publisher.branches(args.project).each do |b|
        Volley::Log.warn "#{args.project}@#{b}"
      end
    end
  end
  plan :remove do
    default do
      pub = Volley::Dsl.publisher
      p = args.descriptor.project
      b = args.descriptor.branch
      if args.force
        Volley::Log.debug "removing branch: #{p}@#{b}"
        pub.delete_branch(p, b)
      else
        Volley::Log.warn "this process cannot be undone, if you are sure, run the same command with -F"
      end
    end
  end
end

project :version do
  plan :list do
    default do
      p = args.descriptor.project
      b = args.descriptor.branch
      Volley::Dsl.publisher.versions(p, b).each do |v|
        Volley::Log.warn "#{p}@#{b}:#{v}"
      end
    end
  end
  plan :remove do
    default do
      pub = Volley::Dsl.publisher
      (p, b, v) = args.descriptor.get
      if args.force
        Volley::Log.debug "removing version: #{p}@#{b}:#{v}"
        pub.delete_version(p, b, v)
      else
        Volley::Log.warn "this process cannot be undone, if you are sure, run the same command with -F"
      end
    end
  end
  plan :exists do
    default do
      (project, branch, version) = args.descriptor.get
      pub = Volley::Dsl.publisher
      if project && branch && version != "latest"
        if pub.exists?(project, branch, version)
          Volley::Log.warn "#{args.descriptor} exists"
        else
          Volley::Log.warn "#{args.descriptor} does not exist"
          raise "#{args.descriptor} does not exist"
        end
      else
        Volley::Log.error "must specify full descriptor"
        stop
      end
    end
  end
end
